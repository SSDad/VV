function Callback_Pushbutton_LoadImagePanel_LoadImage(src, evnt)

hFig = ancestor(src, 'Figure');
data = guidata(hFig);

%% load image info
td = tempdir;
path_info = fullfile(td, 'VV');
ffn_info = fullfile(path_info, 'info.mat');
if ~exist(path_info, 'dir')
    mkdir(path_info);
end
if ~exist(ffn_info, 'file')
    VolumePath = uigetdir();
    [dataPath] = fileparts(VolumePath);
    save(ffn_info, 'dataPath');
else
    load(ffn_info);
    VolumePath = uigetdir(dataPath);
end

data.FileInfo.VolumePath = VolumePath;

%% load image data
hWB = waitbar(0, 'Loading Volume...');

path_MatData = fullfile(fileparts(dataPath), 'MatData');
[~, fd_VolumePath] = fileparts(VolumePath);
ffn_mat = fullfile(path_MatData, [fd_VolumePath, '.mat']);

if exist(ffn_mat, 'file')
    load(ffn_mat);
else
    [V, SI] = dicomreadVolume(VolumePath);
    save(ffn_mat, 'V', 'SI');
end

data.Image.V = V;
data.Image.SI = SI;

waitbar(1/2, hWB, 'Initializing View...');

%%  middle slice in image viewer
AC = [255 255 102]/255;

% Axial
iSliceA = round(SI.ImageSize(3)/2);
IA = V(:,:,iSliceA);
xmin = SI.PatientPositions(iSliceA, 1);
ymin = SI.PatientPositions(iSliceA, 2);
xL = SI.PixelSpacings(1)*(SI.ImageSize(2)-1);
yL = SI.PixelSpacings(2)*(SI.ImageSize(1)-1);
RA = imref2d(SI.ImageSize(1:2), [xmin xmin+xL], [ymin ymin+yL]);
hA = data.Panel.View.Comp.hAxis(1).Image;
hPlotObj(1).Image = imshow(IA, RA, [], 'parent', hA);
axis(hA, 'tight', 'equal')
hA.XColor = AC;
hA.YColor = AC;

data.Image.RA = RA;

% XHair
hPlotObj(1).X = images.roi.Crosshair(hA, 'Position', [xmin+xL/2 ymin+yL/2], ...
                                         LineWidth=0.5, Color='c', Tag = 'A');
addlistener(hPlotObj(1).X, 'MovingROI', @CB_XMoving);

% Boundaries
hPlotObj(1).bd1 = line(hA, 'XData', [], 'YData', [], LineWidth=1, Color='g');
hPlotObj(1).bd2 = line(hA, 'XData', [], 'YData', [], LineWidth=1, Color='c');
hPlotObj(1).cent2 = line(hA, 'XData', [], 'YData', [], 'Marker', 'x', LineWidth=1, Color='r');

% Sagittal
iSliceS = round(SI.ImageSize(2)/2);
IS = squeeze(V(:, iSliceS, :));
IS = IS';
% IS = imrotate(IS, 90);
% IS = flipud(IS);
ymin = SI.PatientPositions(1, 2);
zmin = SI.PatientPositions(1, 3);
zmax = SI.PatientPositions(end, 3);
RS = imref2d(SI.ImageSize([3, 1]), [ymin ymin+yL], [zmin zmax]);
hA = data.Panel.View.Comp.hAxis(4).Image;

hPlotObj(4).Image = imshow(IS, RS, [], 'parent', hA);

axis(hA, 'tight', 'equal')
hA.XAxisLocation = 'bottom';
hA.YDir = 'normal';
hA.XColor = AC;
hA.YColor = AC;

data.Image.RS = RS;

hPlotObj(4).X = images.roi.Crosshair(hA, 'Position', [ymin+yL/2 (zmin+zmax)/2], ...
                                         LineWidth=0.5, Color='c', Tag = 'S');
addlistener(hPlotObj(4).X, 'MovingROI', @CB_XMoving);

% Boundaries
hPlotObj(4).bd1 = line(hA, 'XData', [], 'YData', [], LineWidth=1, Color='g');
hPlotObj(4).cent1 = line(hA, 'XData', [], 'YData', [], 'Marker', 'x', LineWidth=1, Color='r');

% Coronal
iSliceC = round(SI.ImageSize(1)/2);
IC = squeeze(V(iSliceC, :, :));
IC = IC';
% IC = imrotate(IC, 90);
% IC = flipud(IC);
RC = imref2d(SI.ImageSize([3, 2]), [xmin xmin+xL], [zmin zmax]);
hA = data.Panel.View.Comp.hAxis(3).Image;
hPlotObj(3).Image = imshow(IC, RC, [], 'parent', hA);

axis(hA, 'tight', 'equal')
hA.XAxisLocation = 'bottom';
hA.YDir = 'normal';
hA.XColor = AC;
hA.YColor = AC;

data.Image.RC = RC;

hPlotObj(3).X = images.roi.Crosshair(hA, 'Position', [xmin+xL/2 (zmin+zmax)/2], ...
                                         LineWidth=0.5, Color='c', Tag = 'C');
addlistener(hPlotObj(3).X, 'MovingROI', @CB_XMoving);

% Boundaries
hPlotObj(3).bd1 = line(hA, 'XData', [], 'YData', [], LineWidth=1, Color='g');
hPlotObj(3).ball = line(hA, 'XData', [], 'YData', [], LineWidth=1, Color='r');
hPlotObj(3).cent = line(hA, 'XData', [], 'YData', [], 'Marker', 'x', LineWidth=2, Color='r');

%% save data
data.Panel.View.Comp.hPlotObj = hPlotObj;

% 
% % template box
% hPlotObj.LBox = rectangle(hA, 'Position', [0 0 0 0], 'EdgeColor', 'g', 'LineWidth', 1);
% hPlotObj.TBox = rectangle(hA, 'Position', [0 0 0 0], 'EdgeColor', 'c', 'LineWidth', 1);
% hPlotObj.CBox = rectangle(hA, 'Position', [0 0 0 0], 'EdgeColor', 'b', 'LineWidth', 1);
% 
% data.Panel.View.Comp.hPlotObj = hPlotObj;
% 
% %% Slice Slider
% hSS = data.Panel.SliceSlider.Comp.hSlider.Slice;
% hSS.Min = 1;
% hSS.Max = nSlices;
% hSS.Value = iSlice;
% hSS.SliderStep = [1 10]/(nSlices-1);
% 
% data.Panel.SliceSlider.Comp.hText.nImages.String = [num2str(iSlice), ' / ', num2str(nSlices)];

waitbar(1, hWB, 'Volume loaded!');
pause(1);
close(hWB);

% %% contrast
% yc = histcounts(I, max(I(:))+1);
% yc = log10(yc);
% yc = yc/max(yc);
% xc = 1:length(yc);
% xc = xc/max(xc);
% 
% data.Panel.ContrastBar.Comp.hPlotObj.Hist.XData = xc;
% data.Panel.ContrastBar.Comp.hPlotObj.Hist.YData = yc;
% 
% data.Snake.SlitherDone = false;

guidata(hFig, data);